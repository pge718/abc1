// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sulekha.Models;

namespace Sulekha.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190423140111_Sulekha")]
    partial class Sulekha
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sulekha.Models.Appointment", b =>
                {
                    b.Property<int>("AID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact_Number");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorTypeName");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("ID");

                    b.Property<string>("LastName");

                    b.Property<int>("age");

                    b.Property<string>("timeSlot");

                    b.HasKey("AID");

                    b.HasIndex("DoctorTypeName");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Sulekha.Models.Business", b =>
                {
                    b.Property<int>("Business_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("DoctorTypeName");

                    b.Property<string>("Information");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Photo");

                    b.Property<string>("Service_name");

                    b.Property<string>("SubService_name");

                    b.Property<int>("TypeName");

                    b.HasKey("Business_ID");

                    b.HasIndex("DoctorTypeName");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("Sulekha.Models.Doctor", b =>
                {
                    b.Property<string>("TypeName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Images");

                    b.Property<string>("TypeCode");

                    b.HasKey("TypeName");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Sulekha.Models.Signup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact_Number");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Role");

                    b.Property<string>("password");

                    b.Property<string>("retypePassword");

                    b.HasKey("ID");

                    b.ToTable("Signup");
                });

            modelBuilder.Entity("Sulekha.Models.Appointment", b =>
                {
                    b.HasOne("Sulekha.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorTypeName");
                });

            modelBuilder.Entity("Sulekha.Models.Business", b =>
                {
                    b.HasOne("Sulekha.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorTypeName");
                });
#pragma warning restore 612, 618
        }
    }
}
